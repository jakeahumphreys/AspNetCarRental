@model EIRLSSAssignment1.Models.ViewModels.BookingCreateViewModel


@{
    ViewBag.Title = "New Booking";
}


@if (User.IsInRole("Admin"))
{
    <div>
        <button class="btn btn-primary fa fa-arrow-circle-left" data-toggle="tooltip" title="Back" onclick="location.href='@Url.Action("Index","Admin", new { })';return false;"></button>
    </div>
}
else
{
    <div>
        <button class="btn btn-primary fa fa-arrow-circle-left" data-toggle="tooltip" title="Back" onclick="location.href='@Url.Action("Index","Home", new { })';return false;"></button>
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    if (Model.ErrorObj != null)
    {
        <div class="alert alert-danger">
            <h4>Unfortunately we are unable to make that booking, here's why:</h4>
            <hr />
            @if (Model.ErrorObj.conflictingBookings != null)
            {
                <p>Your chosen period intersects with the following booking period(s):</p>
                <ul>
                    @foreach (var booking in Model.ErrorObj.conflictingBookings)
                    {
                        <li>@booking.BookingStart.ToString("d") to @booking.BookingFinish.ToString("d")</li>
                    }
                </ul>
                <br />
                <p>Please try another vehicle or select a different date range.</p>
            }
            @if (Model.ErrorObj.conflictingOptionalExtras != null)
            {
                <p>Your chosen optional extras are booked in the following intersecting period(s):</p>
                <ul>
                    @foreach (var conflictingExtra in Model.ErrorObj.conflictingOptionalExtras)
                    {
                        <li>Extra: @conflictingExtra.OptionalExtra.Name is booked from @conflictingExtra.StartDate.ToString("d") to @conflictingExtra.EndDate.ToString("d") </li>
                    }
                </ul>
                <br />
                <p>Please try another extra or select a different date range.</p>
            }
            @if (Model.ErrorObj.isInThePast == true)
            {
                <p>Unable to make bookings for dates in the past.</p>

            }
            @if (Model.ErrorObj.isStartAfterEnd == true)
            {
                <p>The Start date must come before end date.</p>
            }
            @if (Model.ErrorObj.isEndBeforeStart == true)
            {
                <p>The End date must come after the start date.</p>
            }
            @if (Model.ErrorObj.isBelowMinRental == true)
            {
                <p>Your selected dates fall below the minimum rental period.</p>
            }
            @if (Model.ErrorObj.isBeyondMaxRental == true)
            {
                <p>This booking exceeds the maximum rental period.</p>
            }
            @if (Model.ErrorObj.isStartBeforeOpen == true)
            {
                <p>A vehicle cannot be collected before the garage opens.</p>
            }
            @if (Model.ErrorObj.isStartAfterClose == true)
            {
                <p>A vehicle cannot be collected after the garage has closed.</p>
            }
            @if (Model.ErrorObj.isEndBeforeOpen == true)
            {
                <p>A vehicle cannot be returned before the garage opens.</p>
            }
            @if (Model.ErrorObj.isEndAfterClose == true)
            {
                if (Model.IsTrustedUser == true || User.IsInRole("Admin"))
                {
                    <p>A Late return has not been arranged for this booking. Please select the 'Late Return' checkbox to do so.</p>
                }
                else
                {
                    <p>Late returns are not enabled for your account.</p>
                }
            }
        </div>
    }

    if (Model.VehicleCount == 0)
    {
        <div class="alert alert-danger">
            <div class="row">
                <span class="fa fa-sad-cry" style="color:red; font-size:40px; margin-right:10px;"></span>
                <h3>There are no vehicles currently available.</h3>
            </div>

            <hr />
            <h5>Normal service will resume as soon as possible.</h5>
        </div>
    }
    else
    {
        <div class="form-horizontal">
            <hr />
            <h2>Request a booking</h2>
            <h5>This is the start of your booking journey! First we'll need to take some details to reserve the vehicle for collection.</h5>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            

            @if (User.IsInRole("Admin"))
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.booking.UserId, "Customer", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.booking.UserId, (SelectList)Model.Users, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.booking.UserId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StartDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDateTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EndDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EndDateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EndDateTime, "", new { @class = "text-danger" })
                </div>
            </div>
            @if (User.IsInRole("Admin") || @Model.IsTrustedUser == true)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.booking.IsLateReturn, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.booking.IsLateReturn, new { htmlAttributes = new { @class = "form-control" } })
                        <p>Late return allows you to return the keys to your rented vehicle after closing time via the letterbox.</p>
                        @Html.ValidationMessageFor(model => model.booking.IsLateReturn, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.booking.VehicleId, "Vehicle", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.booking.VehicleId, (SelectList)Model.Vehicles, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.booking.VehicleId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.booking.OptionalExtras, "Add Extras", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.OptionalExtraCount == 0)
                    {
                        <b style="color: red; background-color:beige;">Unfortunately there are no available extras at this time.</b>
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.SelectedExtraIds, (MultiSelectList)Model.OptionalExtras, new { @class = "multi-select", multiple = "multiple" })
                        @Html.ValidationMessageFor(model => model.SelectedExtraIds, "", new { @class = "text-danger" })
                    }
                </div>
            </div>

            @if (User.IsInRole("Admin"))
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.booking.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.booking.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.booking.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Reserve" class="btn btn-success" />
                </div>
            </div>
        </div>
    }
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
